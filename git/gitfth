1.저장소 만들기
  프로젝트 파일 생성.
  
  프로젝트 디렉토리로 들어갑니다. 
  
  현재 디렉토리를 git의 (버전) 저장소로 만듭니다. 

2.git이 관리할 대상으로 파일등록
  파일 생성.
  
  git이 파일을 추적하도록 명령.
  
  프로젝트 상태확인.
  
3.버전 만들기(commit)
  버전이란 의미있는 변화.
  버전에 포함될 버전을 만든 사람에 대한 정보를 설정합니다. 
  이 설정은 ~/.gitconfig 파일에 저장되고 1번만 해주면 됩니다.
  
  
4.Stage area
5.변경사항 확인하기
6.과거의 버전으로 돌아가기
7.명령의 빈도와 메뉴얼 보는 방법

GitHub
1.원격저장소를 지역 저장소로 복제
-git의 소스코드를 지역저장소로 가져오기
 $git clone https://github.com/git/git.git

-로그를 거꾸로 출력하기
 $git log --reverse

-git의 첫번째 커밋으로 체크아웃하기
 $git checkout e83c5163316f89bfbde7d9ab23ca2e25604af290





디렉토리 제거
 $git rm -r --cached FolderName
 $git commit -m "Removed folder from repository"
 $git push origin master


git 맥 사용시 .DS_Store 파일 제거 및 무시하기
1)저장소에서 기존 파일 제거
find . -name .DS_Store -print0 | xargs -0 git rm -f --ignore-unmatch
2).gitignore 파일이 있는 경우
  git add .gitignore
  git commit -m '.DS_Store banished!'
3).gitignore 파일이 없는 경우
  git repository에서 이 파일을 무시하도록한다.
   3-1) create gitignore file 
      vi ~/.gitignore_global
   3-2) insert ignore pattern 
   3-3) add git config
      git config --global core.excludesfile ~/.gitignore_global


ignore pattern

# Compiled source #
###################
*.com
*.class
*.dll
*.exe
*.o
*.so

# Packages #
############
# it's better to unpack these files and commit the raw source
# git has its own built in compression methods
*.7z
*.dmg
*.gz
*.iso
*.jar
*.rar
*.tar
*.zip

# Logs and databases #
######################
*.log
*.sql
*.sqlite

# OS generated files #
######################
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db
